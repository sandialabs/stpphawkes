// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// areapl
double areapl(const arma::mat& poly);
RcppExport SEXP _stpphawkes_areapl(SEXP polySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type poly(polySEXP);
    rcpp_result_gen = Rcpp::wrap(areapl(poly));
    return rcpp_result_gen;
END_RCPP
}
// condInt_mcmc_stpp
DataFrame condInt_mcmc_stpp(DataFrame data, double t_maxi, double mu_init, double a_init, double b_init, double sig_init, arma::mat poly, double sig_mui, double sig_ai, double sig_bi, double sig_sigi, int n_mcmc, int n_burn, bool print);
RcppExport SEXP _stpphawkes_condInt_mcmc_stpp(SEXP dataSEXP, SEXP t_maxiSEXP, SEXP mu_initSEXP, SEXP a_initSEXP, SEXP b_initSEXP, SEXP sig_initSEXP, SEXP polySEXP, SEXP sig_muiSEXP, SEXP sig_aiSEXP, SEXP sig_biSEXP, SEXP sig_sigiSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxi(t_maxiSEXP);
    Rcpp::traits::input_parameter< double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< double >::type a_init(a_initSEXP);
    Rcpp::traits::input_parameter< double >::type b_init(b_initSEXP);
    Rcpp::traits::input_parameter< double >::type sig_init(sig_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type poly(polySEXP);
    Rcpp::traits::input_parameter< double >::type sig_mui(sig_muiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_ai(sig_aiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_bi(sig_biSEXP);
    Rcpp::traits::input_parameter< double >::type sig_sigi(sig_sigiSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(condInt_mcmc_stpp(data, t_maxi, mu_init, a_init, b_init, sig_init, poly, sig_mui, sig_ai, sig_bi, sig_sigi, n_mcmc, n_burn, print));
    return rcpp_result_gen;
END_RCPP
}
// condInt_mcmc_stpp_branching
List condInt_mcmc_stpp_branching(DataFrame data, double t_maxi, std::vector<int> y_init, double mu_init, double a_init, double b_init, double sig_init, arma::mat poly, std::vector<double> mu_parami, std::vector<double> a_parami, std::vector<double> sig_parami, std::vector<double> b_parami, double sig_bi, double sig_sigi, int n_mcmc, int n_burn, bool print);
RcppExport SEXP _stpphawkes_condInt_mcmc_stpp_branching(SEXP dataSEXP, SEXP t_maxiSEXP, SEXP y_initSEXP, SEXP mu_initSEXP, SEXP a_initSEXP, SEXP b_initSEXP, SEXP sig_initSEXP, SEXP polySEXP, SEXP mu_paramiSEXP, SEXP a_paramiSEXP, SEXP sig_paramiSEXP, SEXP b_paramiSEXP, SEXP sig_biSEXP, SEXP sig_sigiSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxi(t_maxiSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type y_init(y_initSEXP);
    Rcpp::traits::input_parameter< double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< double >::type a_init(a_initSEXP);
    Rcpp::traits::input_parameter< double >::type b_init(b_initSEXP);
    Rcpp::traits::input_parameter< double >::type sig_init(sig_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type poly(polySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu_parami(mu_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_parami(a_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sig_parami(sig_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_parami(b_paramiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_bi(sig_biSEXP);
    Rcpp::traits::input_parameter< double >::type sig_sigi(sig_sigiSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(condInt_mcmc_stpp_branching(data, t_maxi, y_init, mu_init, a_init, b_init, sig_init, poly, mu_parami, a_parami, sig_parami, b_parami, sig_bi, sig_sigi, n_mcmc, n_burn, print));
    return rcpp_result_gen;
END_RCPP
}
// condInt_mcmc_stpp_branching_md
List condInt_mcmc_stpp_branching_md(DataFrame data, arma::mat t_misi, double t_maxi, std::vector<int> y_init, double mu_init, double a_init, double b_init, double sig_init, arma::mat poly, std::vector<double> mu_parami, std::vector<double> a_parami, std::vector<double> sig_parami, std::vector<double> b_parami, double sig_bi, double sig_sigi, int n_mcmc, int n_burn, bool print, bool sp_clip);
RcppExport SEXP _stpphawkes_condInt_mcmc_stpp_branching_md(SEXP dataSEXP, SEXP t_misiSEXP, SEXP t_maxiSEXP, SEXP y_initSEXP, SEXP mu_initSEXP, SEXP a_initSEXP, SEXP b_initSEXP, SEXP sig_initSEXP, SEXP polySEXP, SEXP mu_paramiSEXP, SEXP a_paramiSEXP, SEXP sig_paramiSEXP, SEXP b_paramiSEXP, SEXP sig_biSEXP, SEXP sig_sigiSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP, SEXP sp_clipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type t_misi(t_misiSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxi(t_maxiSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type y_init(y_initSEXP);
    Rcpp::traits::input_parameter< double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< double >::type a_init(a_initSEXP);
    Rcpp::traits::input_parameter< double >::type b_init(b_initSEXP);
    Rcpp::traits::input_parameter< double >::type sig_init(sig_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type poly(polySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu_parami(mu_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_parami(a_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sig_parami(sig_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_parami(b_paramiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_bi(sig_biSEXP);
    Rcpp::traits::input_parameter< double >::type sig_sigi(sig_sigiSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    Rcpp::traits::input_parameter< bool >::type sp_clip(sp_clipSEXP);
    rcpp_result_gen = Rcpp::wrap(condInt_mcmc_stpp_branching_md(data, t_misi, t_maxi, y_init, mu_init, a_init, b_init, sig_init, poly, mu_parami, a_parami, sig_parami, b_parami, sig_bi, sig_sigi, n_mcmc, n_burn, print, sp_clip));
    return rcpp_result_gen;
END_RCPP
}
// condInt_mcmc_stpp_branching_nonunif
List condInt_mcmc_stpp_branching_nonunif(DataFrame data, double t_maxi, std::vector<int> y_init, double mu_init, double a_init, double b_init, double sig_init, double mux_init, double muy_init, double sigx_init, double sigy_init, arma::mat poly, std::vector<double> mu_parami, std::vector<double> a_parami, std::vector<double> sig_parami, std::vector<double> b_parami, double sig_bi, double sig_sigi, std::vector<double> mux_parami, std::vector<double> muy_parami, std::vector<double> sigx_parami, std::vector<double> sigy_parami, int n_mcmc, int n_burn, bool print);
RcppExport SEXP _stpphawkes_condInt_mcmc_stpp_branching_nonunif(SEXP dataSEXP, SEXP t_maxiSEXP, SEXP y_initSEXP, SEXP mu_initSEXP, SEXP a_initSEXP, SEXP b_initSEXP, SEXP sig_initSEXP, SEXP mux_initSEXP, SEXP muy_initSEXP, SEXP sigx_initSEXP, SEXP sigy_initSEXP, SEXP polySEXP, SEXP mu_paramiSEXP, SEXP a_paramiSEXP, SEXP sig_paramiSEXP, SEXP b_paramiSEXP, SEXP sig_biSEXP, SEXP sig_sigiSEXP, SEXP mux_paramiSEXP, SEXP muy_paramiSEXP, SEXP sigx_paramiSEXP, SEXP sigy_paramiSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxi(t_maxiSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type y_init(y_initSEXP);
    Rcpp::traits::input_parameter< double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< double >::type a_init(a_initSEXP);
    Rcpp::traits::input_parameter< double >::type b_init(b_initSEXP);
    Rcpp::traits::input_parameter< double >::type sig_init(sig_initSEXP);
    Rcpp::traits::input_parameter< double >::type mux_init(mux_initSEXP);
    Rcpp::traits::input_parameter< double >::type muy_init(muy_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigx_init(sigx_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigy_init(sigy_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type poly(polySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu_parami(mu_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_parami(a_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sig_parami(sig_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_parami(b_paramiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_bi(sig_biSEXP);
    Rcpp::traits::input_parameter< double >::type sig_sigi(sig_sigiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mux_parami(mux_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type muy_parami(muy_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sigx_parami(sigx_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sigy_parami(sigy_paramiSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(condInt_mcmc_stpp_branching_nonunif(data, t_maxi, y_init, mu_init, a_init, b_init, sig_init, mux_init, muy_init, sigx_init, sigy_init, poly, mu_parami, a_parami, sig_parami, b_parami, sig_bi, sig_sigi, mux_parami, muy_parami, sigx_parami, sigy_parami, n_mcmc, n_burn, print));
    return rcpp_result_gen;
END_RCPP
}
// condInt_mcmc_stpp_branching_nonunif_md
List condInt_mcmc_stpp_branching_nonunif_md(DataFrame data, arma::mat t_misi, double t_maxi, std::vector<int> y_init, double mu_init, double a_init, double b_init, double sig_init, double mux_init, double muy_init, double sigx_init, double sigy_init, arma::mat poly, std::vector<double> mu_parami, std::vector<double> a_parami, std::vector<double> sig_parami, std::vector<double> b_parami, double sig_bi, double sig_sigi, std::vector<double> mux_parami, std::vector<double> muy_parami, std::vector<double> sigx_parami, std::vector<double> sigy_parami, int n_mcmc, int n_burn, bool print, bool sp_clip);
RcppExport SEXP _stpphawkes_condInt_mcmc_stpp_branching_nonunif_md(SEXP dataSEXP, SEXP t_misiSEXP, SEXP t_maxiSEXP, SEXP y_initSEXP, SEXP mu_initSEXP, SEXP a_initSEXP, SEXP b_initSEXP, SEXP sig_initSEXP, SEXP mux_initSEXP, SEXP muy_initSEXP, SEXP sigx_initSEXP, SEXP sigy_initSEXP, SEXP polySEXP, SEXP mu_paramiSEXP, SEXP a_paramiSEXP, SEXP sig_paramiSEXP, SEXP b_paramiSEXP, SEXP sig_biSEXP, SEXP sig_sigiSEXP, SEXP mux_paramiSEXP, SEXP muy_paramiSEXP, SEXP sigx_paramiSEXP, SEXP sigy_paramiSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP, SEXP sp_clipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type t_misi(t_misiSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxi(t_maxiSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type y_init(y_initSEXP);
    Rcpp::traits::input_parameter< double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< double >::type a_init(a_initSEXP);
    Rcpp::traits::input_parameter< double >::type b_init(b_initSEXP);
    Rcpp::traits::input_parameter< double >::type sig_init(sig_initSEXP);
    Rcpp::traits::input_parameter< double >::type mux_init(mux_initSEXP);
    Rcpp::traits::input_parameter< double >::type muy_init(muy_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigx_init(sigx_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigy_init(sigy_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type poly(polySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu_parami(mu_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type a_parami(a_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sig_parami(sig_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type b_parami(b_paramiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_bi(sig_biSEXP);
    Rcpp::traits::input_parameter< double >::type sig_sigi(sig_sigiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mux_parami(mux_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type muy_parami(muy_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sigx_parami(sigx_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sigy_parami(sigy_paramiSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    Rcpp::traits::input_parameter< bool >::type sp_clip(sp_clipSEXP);
    rcpp_result_gen = Rcpp::wrap(condInt_mcmc_stpp_branching_nonunif_md(data, t_misi, t_maxi, y_init, mu_init, a_init, b_init, sig_init, mux_init, muy_init, sigx_init, sigy_init, poly, mu_parami, a_parami, sig_parami, b_parami, sig_bi, sig_sigi, mux_parami, muy_parami, sigx_parami, sigy_parami, n_mcmc, n_burn, print, sp_clip));
    return rcpp_result_gen;
END_RCPP
}
// condInt_mcmc_temporal
DataFrame condInt_mcmc_temporal(arma::vec ti, double t_maxi, double mu_init, double alpha_init, double beta_init, double sig_mui, double sig_alphai, double sig_betai, int n_mcmc, int n_burn, bool print);
RcppExport SEXP _stpphawkes_condInt_mcmc_temporal(SEXP tiSEXP, SEXP t_maxiSEXP, SEXP mu_initSEXP, SEXP alpha_initSEXP, SEXP beta_initSEXP, SEXP sig_muiSEXP, SEXP sig_alphaiSEXP, SEXP sig_betaiSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ti(tiSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxi(t_maxiSEXP);
    Rcpp::traits::input_parameter< double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< double >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< double >::type sig_mui(sig_muiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_alphai(sig_alphaiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_betai(sig_betaiSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(condInt_mcmc_temporal(ti, t_maxi, mu_init, alpha_init, beta_init, sig_mui, sig_alphai, sig_betai, n_mcmc, n_burn, print));
    return rcpp_result_gen;
END_RCPP
}
// condInt_mcmc_temporal_branching
List condInt_mcmc_temporal_branching(std::vector<double> ti, double t_maxi, std::vector<int> y_init, double mu_init, double alpha_init, double beta_init, std::vector<double> mu_parami, std::vector<double> alpha_parami, std::vector<double> beta_parami, double sig_betai, int n_mcmc, int n_burn, bool print);
RcppExport SEXP _stpphawkes_condInt_mcmc_temporal_branching(SEXP tiSEXP, SEXP t_maxiSEXP, SEXP y_initSEXP, SEXP mu_initSEXP, SEXP alpha_initSEXP, SEXP beta_initSEXP, SEXP mu_paramiSEXP, SEXP alpha_paramiSEXP, SEXP beta_paramiSEXP, SEXP sig_betaiSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type ti(tiSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxi(t_maxiSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type y_init(y_initSEXP);
    Rcpp::traits::input_parameter< double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< double >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu_parami(mu_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha_parami(alpha_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type beta_parami(beta_paramiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_betai(sig_betaiSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(condInt_mcmc_temporal_branching(ti, t_maxi, y_init, mu_init, alpha_init, beta_init, mu_parami, alpha_parami, beta_parami, sig_betai, n_mcmc, n_burn, print));
    return rcpp_result_gen;
END_RCPP
}
// condInt_mcmc_temporal_branching_md
DataFrame condInt_mcmc_temporal_branching_md(std::vector<double> ti, arma::mat t_misi, double t_maxi, std::vector<int> y_init, double mu_init, double alpha_init, double beta_init, std::vector<double> mu_parami, std::vector<double> alpha_parami, std::vector<double> beta_parami, double sig_betai, int n_mcmc, int n_burn, bool print);
RcppExport SEXP _stpphawkes_condInt_mcmc_temporal_branching_md(SEXP tiSEXP, SEXP t_misiSEXP, SEXP t_maxiSEXP, SEXP y_initSEXP, SEXP mu_initSEXP, SEXP alpha_initSEXP, SEXP beta_initSEXP, SEXP mu_paramiSEXP, SEXP alpha_paramiSEXP, SEXP beta_paramiSEXP, SEXP sig_betaiSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type ti(tiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type t_misi(t_misiSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxi(t_maxiSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type y_init(y_initSEXP);
    Rcpp::traits::input_parameter< double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< double >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu_parami(mu_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alpha_parami(alpha_paramiSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type beta_parami(beta_paramiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_betai(sig_betaiSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(condInt_mcmc_temporal_branching_md(ti, t_misi, t_maxi, y_init, mu_init, alpha_init, beta_init, mu_parami, alpha_parami, beta_parami, sig_betai, n_mcmc, n_burn, print));
    return rcpp_result_gen;
END_RCPP
}
// condInt_mcmc_temporal_md
DataFrame condInt_mcmc_temporal_md(arma::vec ti, arma::vec t_misi, double t_maxi, double mu_init, double alpha_init, double beta_init, double sig_mui, double sig_alphai, double sig_betai, int n_mcmc, int n_burn, bool print, bool printmc);
RcppExport SEXP _stpphawkes_condInt_mcmc_temporal_md(SEXP tiSEXP, SEXP t_misiSEXP, SEXP t_maxiSEXP, SEXP mu_initSEXP, SEXP alpha_initSEXP, SEXP beta_initSEXP, SEXP sig_muiSEXP, SEXP sig_alphaiSEXP, SEXP sig_betaiSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP, SEXP printmcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ti(tiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t_misi(t_misiSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxi(t_maxiSEXP);
    Rcpp::traits::input_parameter< double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< double >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< double >::type sig_mui(sig_muiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_alphai(sig_alphaiSEXP);
    Rcpp::traits::input_parameter< double >::type sig_betai(sig_betaiSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    Rcpp::traits::input_parameter< bool >::type printmc(printmcSEXP);
    rcpp_result_gen = Rcpp::wrap(condInt_mcmc_temporal_md(ti, t_misi, t_maxi, mu_init, alpha_init, beta_init, sig_mui, sig_alphai, sig_betai, n_mcmc, n_burn, print, printmc));
    return rcpp_result_gen;
END_RCPP
}
// temporal_likelihood
double temporal_likelihood(arma::vec& t, double mu, double alpha, double beta, double t_max);
RcppExport SEXP _stpphawkes_temporal_likelihood(SEXP tSEXP, SEXP muSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP t_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type t_max(t_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(temporal_likelihood(t, mu, alpha, beta, t_max));
    return rcpp_result_gen;
END_RCPP
}
// stpp_likelihood
double stpp_likelihood(arma::vec& x, arma::vec& y, arma::vec& t, arma::mat& poly, double mu, double a, double b, double sig, double t_max);
RcppExport SEXP _stpphawkes_stpp_likelihood(SEXP xSEXP, SEXP ySEXP, SEXP tSEXP, SEXP polySEXP, SEXP muSEXP, SEXP aSEXP, SEXP bSEXP, SEXP sigSEXP, SEXP t_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< double >::type t_max(t_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(stpp_likelihood(x, y, t, poly, mu, a, b, sig, t_max));
    return rcpp_result_gen;
END_RCPP
}
// stpp_likelihood_nonunif
double stpp_likelihood_nonunif(arma::vec& x, arma::vec& y, arma::vec& t, double mu, double a, double b, double sig, double mux, double muy, double sigx, double sigy, double t_max);
RcppExport SEXP _stpphawkes_stpp_likelihood_nonunif(SEXP xSEXP, SEXP ySEXP, SEXP tSEXP, SEXP muSEXP, SEXP aSEXP, SEXP bSEXP, SEXP sigSEXP, SEXP muxSEXP, SEXP muySEXP, SEXP sigxSEXP, SEXP sigySEXP, SEXP t_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< double >::type mux(muxSEXP);
    Rcpp::traits::input_parameter< double >::type muy(muySEXP);
    Rcpp::traits::input_parameter< double >::type sigx(sigxSEXP);
    Rcpp::traits::input_parameter< double >::type sigy(sigySEXP);
    Rcpp::traits::input_parameter< double >::type t_max(t_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(stpp_likelihood_nonunif(x, y, t, mu, a, b, sig, mux, muy, sigx, sigy, t_max));
    return rcpp_result_gen;
END_RCPP
}
// bbox
arma::mat bbox(const arma::mat& poly);
RcppExport SEXP _stpphawkes_bbox(SEXP polySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type poly(polySEXP);
    rcpp_result_gen = Rcpp::wrap(bbox(poly));
    return rcpp_result_gen;
END_RCPP
}
// bboxx
arma::mat bboxx(const arma::mat& poly);
RcppExport SEXP _stpphawkes_bboxx(SEXP polySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type poly(polySEXP);
    rcpp_result_gen = Rcpp::wrap(bboxx(poly));
    return rcpp_result_gen;
END_RCPP
}
// sbox
arma::mat sbox(const arma::mat& poly, const double xfrac, const double yfrac);
RcppExport SEXP _stpphawkes_sbox(SEXP polySEXP, SEXP xfracSEXP, SEXP yfracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const double >::type xfrac(xfracSEXP);
    Rcpp::traits::input_parameter< const double >::type yfrac(yfracSEXP);
    rcpp_result_gen = Rcpp::wrap(sbox(poly, xfrac, yfrac));
    return rcpp_result_gen;
END_RCPP
}
// buffer_region
arma::mat buffer_region(const arma::mat& poly, const double d);
RcppExport SEXP _stpphawkes_buffer_region(SEXP polySEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(buffer_region(poly, d));
    return rcpp_result_gen;
END_RCPP
}
// larger_region
arma::mat larger_region(const arma::mat& poly, const double xfrac, const double yfrac);
RcppExport SEXP _stpphawkes_larger_region(SEXP polySEXP, SEXP xfracSEXP, SEXP yfracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< const double >::type xfrac(xfracSEXP);
    Rcpp::traits::input_parameter< const double >::type yfrac(yfracSEXP);
    rcpp_result_gen = Rcpp::wrap(larger_region(poly, xfrac, yfrac));
    return rcpp_result_gen;
END_RCPP
}
// inout
arma::uvec inout(arma::vec& x, arma::vec& y, arma::mat& poly, bool bound);
RcppExport SEXP _stpphawkes_inout(SEXP xSEXP, SEXP ySEXP, SEXP polySEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type poly(polySEXP);
    Rcpp::traits::input_parameter< bool >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(inout(x, y, poly, bound));
    return rcpp_result_gen;
END_RCPP
}
// ptinpoly
arma::ivec ptinpoly(arma::vec& x, arma::vec& y, arma::vec& xp, arma::vec& yp, arma::mat& bb);
RcppExport SEXP _stpphawkes_ptinpoly(SEXP xSEXP, SEXP ySEXP, SEXP xpSEXP, SEXP ypSEXP, SEXP bbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type yp(ypSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type bb(bbSEXP);
    rcpp_result_gen = Rcpp::wrap(ptinpoly(x, y, xp, yp, bb));
    return rcpp_result_gen;
END_RCPP
}
// simulate_hawkes_stpp
DataFrame simulate_hawkes_stpp(List params, arma::mat poly, arma::vec t_region, double d, DataFrame history, int seed);
RcppExport SEXP _stpphawkes_simulate_hawkes_stpp(SEXP paramsSEXP, SEXP polySEXP, SEXP t_regionSEXP, SEXP dSEXP, SEXP historySEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type poly(polySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t_region(t_regionSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type history(historySEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_hawkes_stpp(params, poly, t_region, d, history, seed));
    return rcpp_result_gen;
END_RCPP
}
// simulate_hawkes_stpp_nonunif
DataFrame simulate_hawkes_stpp_nonunif(List params, arma::mat poly, arma::vec t_region, double d, DataFrame history, int seed);
RcppExport SEXP _stpphawkes_simulate_hawkes_stpp_nonunif(SEXP paramsSEXP, SEXP polySEXP, SEXP t_regionSEXP, SEXP dSEXP, SEXP historySEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type poly(polySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t_region(t_regionSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type history(historySEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_hawkes_stpp_nonunif(params, poly, t_region, d, history, seed));
    return rcpp_result_gen;
END_RCPP
}
// intensity_temporal
double intensity_temporal(double mu, double alpha, double beta, arma::vec& times, double evalpt);
RcppExport SEXP _stpphawkes_intensity_temporal(SEXP muSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP timesSEXP, SEXP evalptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< double >::type evalpt(evalptSEXP);
    rcpp_result_gen = Rcpp::wrap(intensity_temporal(mu, alpha, beta, times, evalpt));
    return rcpp_result_gen;
END_RCPP
}
// simulate_temporal
arma::vec simulate_temporal(const double mu, double alpha, const double beta, const arma::vec& tt, const arma::vec& times, int seed);
RcppExport SEXP _stpphawkes_simulate_temporal(SEXP muSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP ttSEXP, SEXP timesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_temporal(mu, alpha, beta, tt, times, seed));
    return rcpp_result_gen;
END_RCPP
}
// CatMarkMcMc
DataFrame CatMarkMcMc(const std::vector<double>& t, const double t_max, const std::vector<int>& marks, const double mu_init, const double alpha_init, const double beta_init, const std::vector<double> mu_params, std::vector<double>& alpha_param, const std::vector<double>& beta_param, const std::vector<double>& p_param, const double sig_beta, const size_t n_mcmc, const size_t n_burn, bool print);
RcppExport SEXP _stpphawkes_CatMarkMcMc(SEXP tSEXP, SEXP t_maxSEXP, SEXP marksSEXP, SEXP mu_initSEXP, SEXP alpha_initSEXP, SEXP beta_initSEXP, SEXP mu_paramsSEXP, SEXP alpha_paramSEXP, SEXP beta_paramSEXP, SEXP p_paramSEXP, SEXP sig_betaSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type marks(marksSEXP);
    Rcpp::traits::input_parameter< const double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< const double >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type mu_params(mu_paramsSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type alpha_param(alpha_paramSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type beta_param(beta_paramSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type p_param(p_paramSEXP);
    Rcpp::traits::input_parameter< const double >::type sig_beta(sig_betaSEXP);
    Rcpp::traits::input_parameter< const size_t >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< const size_t >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(CatMarkMcMc(t, t_max, marks, mu_init, alpha_init, beta_init, mu_params, alpha_param, beta_param, p_param, sig_beta, n_mcmc, n_burn, print));
    return rcpp_result_gen;
END_RCPP
}
// CatMarkMcMcMissingData
DataFrame CatMarkMcMcMissingData(const std::vector<double>& t, const arma::mat& t_missing, const double t_max, const std::vector<int>& marks, const double mu_init, const double alpha_init, const double beta_init, const std::vector<double> p_init, const std::vector<double> mu_params, const std::vector<double>& alpha_params, const std::vector<double>& beta_params, const std::vector<double>& p_params, const double sig_beta, const size_t n_mcmc, const size_t n_burn, bool print);
RcppExport SEXP _stpphawkes_CatMarkMcMcMissingData(SEXP tSEXP, SEXP t_missingSEXP, SEXP t_maxSEXP, SEXP marksSEXP, SEXP mu_initSEXP, SEXP alpha_initSEXP, SEXP beta_initSEXP, SEXP p_initSEXP, SEXP mu_paramsSEXP, SEXP alpha_paramsSEXP, SEXP beta_paramsSEXP, SEXP p_paramsSEXP, SEXP sig_betaSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type t_missing(t_missingSEXP);
    Rcpp::traits::input_parameter< const double >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type marks(marksSEXP);
    Rcpp::traits::input_parameter< const double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< const double >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type p_init(p_initSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type mu_params(mu_paramsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alpha_params(alpha_paramsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type beta_params(beta_paramsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type p_params(p_paramsSEXP);
    Rcpp::traits::input_parameter< const double >::type sig_beta(sig_betaSEXP);
    Rcpp::traits::input_parameter< const size_t >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< const size_t >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(CatMarkMcMcMissingData(t, t_missing, t_max, marks, mu_init, alpha_init, beta_init, p_init, mu_params, alpha_params, beta_params, p_params, sig_beta, n_mcmc, n_burn, print));
    return rcpp_result_gen;
END_RCPP
}
// WeibullMarkMcMc
DataFrame WeibullMarkMcMc(const std::vector<double>& t, const double t_max, const std::vector<double>& marks, const double wshape, const double mu_init, const double alpha_init, const double beta_init, const double wscale_init, const std::vector<double> mu_params, std::vector<double>& alpha_param, const std::vector<double>& beta_param, const std::vector<double>& wscale_param, const double sig_beta, const size_t n_mcmc, const size_t n_burn, bool print);
RcppExport SEXP _stpphawkes_WeibullMarkMcMc(SEXP tSEXP, SEXP t_maxSEXP, SEXP marksSEXP, SEXP wshapeSEXP, SEXP mu_initSEXP, SEXP alpha_initSEXP, SEXP beta_initSEXP, SEXP wscale_initSEXP, SEXP mu_paramsSEXP, SEXP alpha_paramSEXP, SEXP beta_paramSEXP, SEXP wscale_paramSEXP, SEXP sig_betaSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type marks(marksSEXP);
    Rcpp::traits::input_parameter< const double >::type wshape(wshapeSEXP);
    Rcpp::traits::input_parameter< const double >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< const double >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< const double >::type wscale_init(wscale_initSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type mu_params(mu_paramsSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type alpha_param(alpha_paramSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type beta_param(beta_paramSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type wscale_param(wscale_paramSEXP);
    Rcpp::traits::input_parameter< const double >::type sig_beta(sig_betaSEXP);
    Rcpp::traits::input_parameter< const size_t >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< const size_t >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(WeibullMarkMcMc(t, t_max, marks, wshape, mu_init, alpha_init, beta_init, wscale_init, mu_params, alpha_param, beta_param, wscale_param, sig_beta, n_mcmc, n_burn, print));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stpphawkes_areapl", (DL_FUNC) &_stpphawkes_areapl, 1},
    {"_stpphawkes_condInt_mcmc_stpp", (DL_FUNC) &_stpphawkes_condInt_mcmc_stpp, 14},
    {"_stpphawkes_condInt_mcmc_stpp_branching", (DL_FUNC) &_stpphawkes_condInt_mcmc_stpp_branching, 17},
    {"_stpphawkes_condInt_mcmc_stpp_branching_md", (DL_FUNC) &_stpphawkes_condInt_mcmc_stpp_branching_md, 19},
    {"_stpphawkes_condInt_mcmc_stpp_branching_nonunif", (DL_FUNC) &_stpphawkes_condInt_mcmc_stpp_branching_nonunif, 25},
    {"_stpphawkes_condInt_mcmc_stpp_branching_nonunif_md", (DL_FUNC) &_stpphawkes_condInt_mcmc_stpp_branching_nonunif_md, 27},
    {"_stpphawkes_condInt_mcmc_temporal", (DL_FUNC) &_stpphawkes_condInt_mcmc_temporal, 11},
    {"_stpphawkes_condInt_mcmc_temporal_branching", (DL_FUNC) &_stpphawkes_condInt_mcmc_temporal_branching, 13},
    {"_stpphawkes_condInt_mcmc_temporal_branching_md", (DL_FUNC) &_stpphawkes_condInt_mcmc_temporal_branching_md, 14},
    {"_stpphawkes_condInt_mcmc_temporal_md", (DL_FUNC) &_stpphawkes_condInt_mcmc_temporal_md, 13},
    {"_stpphawkes_temporal_likelihood", (DL_FUNC) &_stpphawkes_temporal_likelihood, 5},
    {"_stpphawkes_stpp_likelihood", (DL_FUNC) &_stpphawkes_stpp_likelihood, 9},
    {"_stpphawkes_stpp_likelihood_nonunif", (DL_FUNC) &_stpphawkes_stpp_likelihood_nonunif, 12},
    {"_stpphawkes_bbox", (DL_FUNC) &_stpphawkes_bbox, 1},
    {"_stpphawkes_bboxx", (DL_FUNC) &_stpphawkes_bboxx, 1},
    {"_stpphawkes_sbox", (DL_FUNC) &_stpphawkes_sbox, 3},
    {"_stpphawkes_buffer_region", (DL_FUNC) &_stpphawkes_buffer_region, 2},
    {"_stpphawkes_larger_region", (DL_FUNC) &_stpphawkes_larger_region, 3},
    {"_stpphawkes_inout", (DL_FUNC) &_stpphawkes_inout, 4},
    {"_stpphawkes_ptinpoly", (DL_FUNC) &_stpphawkes_ptinpoly, 5},
    {"_stpphawkes_simulate_hawkes_stpp", (DL_FUNC) &_stpphawkes_simulate_hawkes_stpp, 6},
    {"_stpphawkes_simulate_hawkes_stpp_nonunif", (DL_FUNC) &_stpphawkes_simulate_hawkes_stpp_nonunif, 6},
    {"_stpphawkes_intensity_temporal", (DL_FUNC) &_stpphawkes_intensity_temporal, 5},
    {"_stpphawkes_simulate_temporal", (DL_FUNC) &_stpphawkes_simulate_temporal, 6},
    {"_stpphawkes_CatMarkMcMc", (DL_FUNC) &_stpphawkes_CatMarkMcMc, 14},
    {"_stpphawkes_CatMarkMcMcMissingData", (DL_FUNC) &_stpphawkes_CatMarkMcMcMissingData, 16},
    {"_stpphawkes_WeibullMarkMcMc", (DL_FUNC) &_stpphawkes_WeibullMarkMcMc, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_stpphawkes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
